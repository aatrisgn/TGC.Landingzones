on:
  push:
  workflow_dispatch:

name: 'Landing Zone Deployment'

jobs:
  create_landingzone:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@main
    - name: Log in with Azure

      uses: azure/login@v1
      with:
        creds: '${{ secrets.LANDINGZONE_CREDENTIALS }}'
        enable-AzPSSession: true

    - name: 'Deploy Infrastructure'
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az deployment tenant create \
          --name demoTenantDeployment \
          --location WestUS \
          --template-file src/bicep/LandingZone.bicep \
          --parameters subscriptionName=testsubscription billingAccountId='${{ secrets.BILLING_ACCOUNT_ID }}' billingProfileId='${{ secrets.BILLING_PROFILE_ID }}' invoiceSectionId=${{ secrets.INVOICE_SECTION_ID }} managementGroupId=LandingZoneManagementGroup

    - name: Create GitHub repository
      shell: pwsh
      run: |
        .github/scripts/CreateRepository.ps1 -authToken '${{ secrets.LANDINGZONE_TOKEN }}' -repositoryName 'SomeRepository'

    - uses: actions/github-script@v6
      with:
        script: |
          const sodium = require('libsodium-wrappers')

          const secret = 'ASdasdasdasdsadas'
          const key = 'YOUR_BASE64_KEY'

          //Check if libsodium is ready and then proceed.
          sodium.ready.then(() => {
            // Convert the secret and key to a Uint8Array.
            let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
            let binsec = sodium.from_string(secret)

            // Encrypt the secret using libsodium
            let encBytes = sodium.crypto_box_seal(binsec, binkey)

            // Convert the encrypted Uint8Array to Base64
            let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)

            // Print the output
            console.log(output)
          });


    - name: Create SPN
      shell: pwsh
      run: |
        .github/scripts/getChangedFiles.ps1 -modulesDirectory '${{ github.workspace }}/BicepModules' -targetDirectory '${{ runner.temp }}/UpdatedModules'

    - name: Add SPN as ServiceConnection
      shell: pwsh
      run: |
        .github/scripts/getChangedFiles.ps1 -modulesDirectory '${{ github.workspace }}/BicepModules' -targetDirectory '${{ runner.temp }}/UpdatedModules'
